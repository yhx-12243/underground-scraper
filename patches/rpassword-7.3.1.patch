diff --git a/src/lib.rs b/src/lib.rs
index dc70738..306e55d 100644
--- a/src/lib.rs
+++ b/src/lib.rs
@@ -63,13 +63,13 @@ mod unix {
     use std::mem;
     use std::os::unix::io::AsRawFd;
 
-    struct HiddenInput {
+    pub struct HiddenInput {
         fd: i32,
         term_orig: termios,
     }
 
     impl HiddenInput {
-        fn new(fd: i32) -> io::Result<HiddenInput> {
+        pub fn new(fd: i32) -> io::Result<HiddenInput> {
             // Make two copies of the terminal settings. The first one will be modified
             // and the second one will act as a backup for when we want to set the
             // terminal back to its original state.
@@ -152,13 +152,13 @@ mod windows {
         GetConsoleMode, SetConsoleMode, CONSOLE_MODE, ENABLE_LINE_INPUT, ENABLE_PROCESSED_INPUT,
     };
 
-    struct HiddenInput {
+    pub struct HiddenInput {
         mode: u32,
         handle: HANDLE,
     }
 
     impl HiddenInput {
-        fn new(handle: HANDLE) -> io::Result<HiddenInput> {
+        pub fn new(handle: HANDLE) -> io::Result<HiddenInput> {
             let mut mode = 0;
 
             // Get the old mode so we can reset back to it when we are done
@@ -232,11 +232,11 @@ mod windows {
 }
 
 #[cfg(target_family = "unix")]
-pub use unix::read_password;
+pub use unix::{HiddenInput, read_password};
 #[cfg(target_family = "wasm")]
 pub use wasm::read_password;
 #[cfg(target_family = "windows")]
-pub use windows::read_password;
+pub use windows::{HiddenInput, read_password};
 
 /// Reads a password from anything that implements BufRead
 pub fn read_password_from_bufread(reader: &mut impl BufRead) -> std::io::Result<String> {
