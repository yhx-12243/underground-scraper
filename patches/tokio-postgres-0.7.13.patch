diff --git a/src/client.rs b/src/client.rs
index b38bbba..0251ed1 100644
--- a/src/client.rs
+++ b/src/client.rs
@@ -19,12 +19,17 @@ use crate::{
 use bytes::{Buf, BytesMut};
 use fallible_iterator::FallibleIterator;
 use futures_channel::mpsc;
-use futures_util::{future, pin_mut, ready, StreamExt, TryStreamExt};
+use futures_util::{future, pin_mut, ready, FutureExt, StreamExt, TryStreamExt};
 use parking_lot::Mutex;
 use postgres_protocol::message::backend::Message;
 use postgres_types::BorrowToSql;
-use std::collections::HashMap;
+use std::borrow::Cow;
+use std::collections::hash_map::{
+    Entry::{Occupied, Vacant},
+    HashMap,
+};
 use std::fmt;
+use std::future::Future;
 #[cfg(feature = "runtime")]
 use std::net::IpAddr;
 #[cfg(feature = "runtime")]
@@ -183,6 +188,7 @@ pub struct Client {
     ssl_negotiation: SslNegotiation,
     process_id: i32,
     secret_key: i32,
+    parsed_statements: HashMap<Cow<'static, str>, Statement>,
 }
 
 impl Client {
@@ -205,6 +211,7 @@ impl Client {
             ssl_negotiation,
             process_id,
             secret_key,
+            parsed_statements: HashMap::new(),
         }
     }
 
@@ -217,6 +224,41 @@ impl Client {
         self.socket_config = Some(socket_config);
     }
 
+    #[inline]
+    pub fn get_type(&self, oid: Oid) -> impl Future<Output = Result<Type, Error>> + '_ {
+        crate::prepare::get_type(&self.inner, oid)
+    }
+
+    pub async fn prepare_static(&mut self, query: Cow<'static, str>) -> Result<Statement, Error> {
+        match self.parsed_statements.entry(query) {
+            Occupied(stmt) => {
+                log::debug!(
+                    "\x1b[32mstmt \x1b[{}m{:?}\x1b[32m already prepared ! => {:?}\x1b[0m",
+                    match stmt.key() {
+                        Cow::Borrowed(_) => 33,
+                        _ => 36,
+                    },
+                    stmt.key(),
+                    stmt.get() as *const Statement
+                );
+                Ok(stmt.get().clone())
+            }
+            Vacant(pos) => {
+                let stmt = prepare::prepare(&self.inner, pos.key(), &[]).await?;
+                log::debug!(
+                    "\x1b[35mstmt \x1b[{}m{:?}\x1b[35m inserted !\x1b[0m",
+                    match pos.key() {
+                        Cow::Borrowed(_) => 33,
+                        _ => 36,
+                    },
+                    pos.key()
+                );
+                pos.insert(stmt.clone());
+                Ok(stmt)
+            }
+        }
+    }
+
     /// Creates a new prepared statement.
     ///
     /// Prepared statements can be executed repeatedly, and may contain query parameters (indicated by `$1`, `$2`, etc),
diff --git a/src/error/mod.rs b/src/error/mod.rs
index 75664d2..3aec6a3 100644
--- a/src/error/mod.rs
+++ b/src/error/mod.rs
@@ -338,7 +338,7 @@ pub enum ErrorPosition {
 }
 
 #[derive(Debug, PartialEq)]
-enum Kind {
+pub enum Kind {
     Io,
     UnexpectedMessage,
     Tls,
@@ -438,7 +438,7 @@ impl Error {
         self.as_db_error().map(DbError::code)
     }
 
-    fn new(kind: Kind, cause: Option<Box<dyn error::Error + Sync + Send>>) -> Error {
+    pub fn new(kind: Kind, cause: Option<Box<dyn error::Error + Sync + Send>>) -> Error {
         Error(Box::new(ErrorInner { kind, cause }))
     }
 
